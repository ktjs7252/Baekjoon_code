#include <bits/stdc++.h>

using namespace std;

int n,k;
int visited[1000030];
int answer;


void bfs(int x)
{
	queue<pair<int,int>> q;
	q.push({x,0});
	
	while(!q.empty())
	{
		int locate=q.front().first;
		int cost=q.front().second;
		q.pop();
		
		if(locate==k)
		{
			answer=cost;
			break;
		}
		int a=locate-1;
		int b=locate+1;
		int c=locate*2;
		
		if(0<=a && visited[a]==0)
		{
			visited[a]=1;
			q.push({a,cost+1});
		}
			if(b<=1000000 && visited[b]==0)
		{
			visited[b]=1;
			q.push({b,cost+1});		}
			if(c<=1000000 && visited[c]==0)
		{
			visited[c]=1;
			q.push({c,cost+1});
		}
		
	}
	

	
	
}

int main()
{
	cin>>n>>k;
	bfs(n);
	cout<<answer;
	
	
	
	return 0;
}

**두번째 풀이**

#include <bits/stdc++.h>
using namespace std;

int arr[1000000];
int n,k;
int main()
{
	cin>>n>>k;
	
	fill(arr,arr+1000000,-1);
	arr[n]=0;
	queue <int> q;
	q.push(n);
	
	while(arr[k]==-1)
	{
		int x=q.front();
		q.pop();
		
		for(int i : {x-1,x+1,x*2})
		{
			if(i>=0 && x<=1000000)
			{
				arr[i]=arr[x]+1;
				q.push(i);
			}
		}
	}
	
	cout<<arr[k];
	
	
	return 0;
}
