#include <bits/stdc++.h>

using namespace std;

struct pos{
	int x,y;
};
int n,m;
int arr[51][51];
vector<pos> house,chicken,pick;
int answer;


void dfs(int now)
{
	if(pick.size()==m)
	{
		int x=0;
		for(int i=0;i<house.size();i++)
		{
			int min_tmp=100000;
			for(int j=0;j<pick.size();j++)
			{
				min_tmp=min(min_tmp,abs(house[i].x-pick[j].x)+abs(house[i].y-pick[j].y));
			}
			x+=min_tmp;
		}
		if(answer>x)
		{
			answer=x;
		}
	}
	
	for(int i=now;i<chicken.size();i++)
	{
		pick.push_back(chicken[i]);
		dfs(i+1);
		pick.pop_back();
	}
	
	
}


int main()
{
	cin>>n>>m;
	pos tmp;
	for(int i=0;i<n;i++)
	{
		for(int j=0;j<n;j++)
		{
			cin>>arr[i][j];
			if(arr[i][j]==1)
			{
				tmp.x=i;
				tmp.y=j;
				house.push_back(tmp);
			}
			if(arr[i][j]==2)
			{
				tmp.x=i;
				tmp.y=j;
				chicken.push_back(tmp);
			}
		}
	}
	answer=1000000;
	dfs(0);
	
	cout<<answer;
	
	
	
	return 0;
}
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
#include <bits/stdc++.h>

using namespace std;

typedef pair<int,int> pos;
int n,m;
int arr[9][9];
vector<pos> v;
int visited[9][9];
int dx[]={-1,0,1,0};
int dy[]={0,-1,0,1};
int answer;

void dfs(int x,int y)
{
	visited[x][y]=1;
	
	for(int i=0;i<4;i++)
	{
		int nx=x+dx[i];
		int ny= y+dy[i];
		
		if(nx>=0 && nx<n && ny>=0 && ny<m)
		{
			if(visited[nx][ny]==0 && arr[nx][ny]==0)
			{
				dfs(nx,ny);
			}
		}
	}
	
	
}

void solve()
{
	memset(visited,0,sizeof(visited));
	
	for(int i=0;i<n;i++)
	{
		for(int j=0;j<m;j++)
		{
			if(arr[i][j]==2)
			{
				dfs(i,j);
			}
		}
	}
	int tmp=0;
	for(int i=0;i<n;i++)
	{
		for(int j=0;j<m;j++)
		{
			if(visited[i][j]==0 && arr[i][j]==0)
			{
				tmp++;
			}
		}
	}
	answer=max(answer,tmp);
}

int main()
{
	cin>>n>>m;
	
	for(int i=0;i<n;i++)
	{
		for(int j=0;j<m;j++)
		{
			scanf("%1d",&arr[i][j]);
			if(arr[i][j]==0)
			{
				v.push_back(pos(i,j));
			}
		}
	}
	
	for(int i=0;i<v.size();i++)
	{
		for(int j=0;j<i;j++)
		{
			for(int k=0;k<j;k++)
			{
				arr[v[i].first][v[i].second]=arr[v[j].first][v[j].second]=arr[v[k].first][v[k].second]=1;
				solve();
				arr[v[i].first][v[i].second]=arr[v[j].first][v[j].second]=arr[v[k].first][v[k].second]=0;
				
			}
		}
	}
	
	cout<<answer;
	
	return 0;
} 
