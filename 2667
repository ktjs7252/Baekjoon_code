#include <stdio.h>
#include <algorithm>

#define MAX_SIZE 25

using namespace std;

// 위,오른,아래,왼
int dx[] = { -1,0,1,0 };
int dy[] = { 0,1,0,-1 };

int n; // n x n map
int group_id; // 단지 번호, 1부터 시작
int group_num[MAX_SIZE * MAX_SIZE]; // 각 단지별 집의 수

int map[MAX_SIZE][MAX_SIZE]; // 지도
bool visited[MAX_SIZE][MAX_SIZE]; // 방문여부 표시

void dfs(int x, int y)
{
    int i, nx, ny;

    visited[x][y] = true;
    group_num[group_id]++; // 해당 단지에 속한 집 수 증가

    // (i,j)의 좌우상하 주변 확인
    for (i = 0; i < 4; i++)
    {
        nx = x + dx[i];
        ny = y + dy[i];

        if (0 <= nx && nx < n && 0 <= ny && ny < n) // 지도 벗어나지 않고
        {
            // 집이면서 && 방문하지 않았다면
            if (map[nx][ny] == 1 && visited[nx][ny] == false)
            {
                dfs(nx, ny); // 방문
            }
        }
    }
}
int main(void)
{
    int i, j;

    // 1. n, map 입력받기
    scanf("%d", &n);
    for (i = 0; i < n; i++)
    {
        for (j = 0; j < n; j++)
        {
            scanf("%1d", &map[i][j]); // 입력을 숫자 1개로 끊어서 받기.
        }
    }

    // 2. 전체 지도 탐색 (완탐)
    for (i = 0; i < n; i++)
    {
        for (j = 0; j < n; j++)
        {
            // 집이면서 && 방문하지 않았으면 -> 방문
            if (map[i][j] == 1 && visited[i][j] == false)
            {
                // 해당 지역 단지 id부여
                group_id++;

                // 해당 단지에 속한 모든 집 탐색
                // start는 (i,j) 에서 했지만 dfs()를 다 돌고 나오면? (i,j)와 연결된 모든 집들을 다 방문하고 나올 것이다.
                // 하나의 그룹을 다 돌고 나올것이다! 이 의미를 이해하는 것이 중요!
                dfs(i, j);
            }
        }
    }

    // 단지마다 집들의 수로 오름차순 정렬
    sort(group_num + 1, group_num + 1 + group_id);

    printf("%d\n", group_id);
    for (i = 1; i <= group_id; i++)
    {
        printf("%d\n", group_num[i]);
    }
}
