#include <stdio.h>
#include <vector>
#include <algorithm>
#include <queue>
#pragma warning(disable:4996)
using namespace std;
int N, M;
int map[101][101];
bool visited[101][101];  
int dx[] = {-1,0,1,0};
int dy[] = {0,1,0,-1};

void bfs(int x, int y)
{
	int i,nx,ny;
	int tmp;
	queue<int> q;
	
	q.push(map[x][y]);
	visited[x][y] = true;
	while (!q.empty())
	{
		tmp = q.front();
		q.pop();
	
		for (i = 0; i < 4; i++)
		{
			nx = x+ dx[i];
			ny = y+ dy[i];

			if (0 <= nx && nx <N  && 0 <= ny && ny < M)
			{
				if (map[nx][ny] != 0 && visited[nx][ny] == false)
				{
					map[nx][ny] = tmp + 1;
					q.push(map[nx][ny]);
					
				}
			}
		}
	}
}

//int idea(int x, int y) //왜 꼭 bfs는 큐에 넣어야 하는지
//{
//	int i,nx,ny;
//
//	visited[x][y] = 1;
//	
//	for (i = 0; i < 4; i++)
//	{
//		nx = x + dx[i];
//		ny = y + dy[i];
//
//		if (0 <= nx && nx < N && 0 <= ny && ny < M)
//		{
//			if (map[nx][ny] != 0 && visited[nx][ny] == false)
//			{
//				map[nx][ny] =map[x][y]+ 1;
//				idea(nx, ny);
//			}
//		}
//	}
//	return map[x][y];
//}

int main(void)
{
	int i, j;

	scanf("%d %d", &N, &M);
	 //init
	for (i = 0; i < N; i++)
	{
		for (j = 0; j < M; j++)
		{
			scanf("%1d", &map[i][j]);
		}
	}

	bfs(0, 0);
	

	printf("%d\n", map[N-1][M-1]);

	return 0;
}



//main logic
/*for (i = 0; i < N; i++)
{
	for (j = 0; j < M; j++)
	{
		if (visited[i][j] == false && map[i][j]==1)
		{
			bfs(i, j);
		}
	}
}*/
